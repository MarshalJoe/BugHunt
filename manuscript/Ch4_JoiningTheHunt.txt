# Joining the Hunt

## The Importance of Choosing Your (Legal) Hunting Ground

The tools and strategies outlined in this document are, needless to say, not for every site. One reason is that certain attack strategies, like active scanning, put strain on web servers by bombarding them with a series of malicious scripts and code snippets, then monitoring their responses for evidence of vulnerabilities. The potential for damaging data and crashing the host server are real, which is why even many bug bounty-offering companies forbid active scanning on their sites, or certain sensitive subdomains.

But whether it's from the misguided notion that unexposed vulnerabilities will stay unexposed, or that white-hat hackers can't be entrusted with avoiding damaging sensitive user data, there are other reasons many companies won't allow any sort of probing of their security vulnerabilities, and they will tell you so â€” with their lawyers.

That's why it's so incredibly important to only go through companies that have officially opened their sites to pentesting, and to rigorously adhere to any terms of service or agreements involved with testing their domains. The easiest way of doing this? Going through an intermediary: Bug hunting communities.

## Bug Hunting Communities

Bug hunting communities offer several advantages, including standardized terms of services, shared bug submission templates, and easy payment systems.

They are also, simply put, a convenient source of companies who won't sue your pants off for a ping.

Here are a few of the best bug hunting communities and bug bounty providers, along with a short description of each one and a review of its services. You can find a list of more sites under [Additional Resources](AdditionalResources.md).

[Bugcrowd](https://bugcrowd.com) is a third-party intermediary between sites who are looking to be vetted and independent security contractors willing to do the vetting. There's an easy, sortable directory of companies offering rewards for bounties in the forms of money and reputation points, which are used to select participants for invitation to limited, restricted bug-testing events. The turnaround for payment (depending on the specificity and need for clarification questions) is usually quick and the criteria for being a security researcher consists mostly of having a valid email address.

[HackerOne](https://www.hackerone.com/), along with Bugcrowd, is one of the largest third-party sites for independent security researchers looking for public bounty programs. In addition to the usual standardized disclosure/submission, payment, and bounty structures, HackerOne provides a nice suite of tutorials and learning materials for progammers new to pentesting. Their list of [publicly-disclosed vulnerabilities](http://h1.nobbd.de/index.php), for example, is a great resource to study in order to better understand common vulnerabilities and the methods for discovering them.

[Vulnerability Lab](https://www.vulnerability-lab.com/) is a submission and disclosure platform that uses a team of in-house experts to vet high-profile vulnerabilities, but also accepts submissions on less critical / lower profile bugs. Like HackerOne, it publicly discloses bug reports after a window of time has elapsed, and is a great reference for beginners looking to better understand the form of bug reports, and methods for discovering and reporting common vulnerabilities. They're [public index of vulnerabilities](https://www.vulnerability-lab.com/) is conveniently tagged with the type of system the bug pertains to.

Then of course there's Google, Amazon, Facebook, Twitter, Paypal and all the other major players who provide large bug bounty programs (see links for their community policies). These sites are subjected to such rigorous testing and vulnerability analysis that I would suggest starting out with smaller targets. As a counterpoint, though, even a simple vulnerability on a Google site will often net a four-figure bounty.

## Testing Grounds

In addition to the sites the previous section covered, there are a few *deliberately* vulnerable sites, meant to act as testing grounds for future security professionals, that are great for cutting your teeth on functioning web apps.

[Google's Project Gruyere](https://google-gruyere.appspot.com/) is a great service and probably the best of the deliberately insecure web apps, partially for the fact that it's the only application deployed live, and partially because Google provides an extensive CodeLab walking you through how to exploit each of the included vulnerabilities. Many of the attacks in this book have been tested on Project Gruyere and I encourage you to use it as the practical exercise component for the [Attacks](Attacks.md) section.

[Damn Vulnerable Web App](http://www.dvwa.co.uk/) is another testing ground, slightly more complicated to set up in the fact that it's not already deployed live and requires a local setup. A PHP/MySQL application, it contains both documented and undocumented vulnerabilities of varying levels of difficulty and for those familiar with Docker &mdash; a common container solution that allows you to build "images" containing the dependencies necessary to run the app in question &mdash; comes with a Dockerfile that allows you to spin it up with just the Docker app as it's principal dependency. **Note: Do not upload it to your hosting provider's public html folder or any internet-facing servers**. If you do, those servers will be compromised.

[Firing Range](https://public-firing-range.appspot.com/) is another Google project, this time a "calibrating" app of sorts for scanners primarily designed to detect various flavors of XSS. That said, it's still a great target for manual methods of vulnerability detection.

[The OWASP Vulnerable Web Applications Directory Project](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project) (The **O**pen **W**eb **A**pplication **S**ecurity **P**roject) is a generally great source for a lot of pentesting and security-related information, but this resource specfically tries to cataglogue deliberately vulnerable web apps of the variety we've listed above. It's great as an up-to-date resource for new applications, and is a nice go-to for when you need a web app built using a particular technology stack (Node, Python, Ruby/Rails, etc) to test your skills or toolchain against.