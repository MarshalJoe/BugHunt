# Web Application Security Overview

A web application, for the purpose of this guide, is a program designed using a client-server architecture that responds to requests and/or user input from the internet. It often (but not always) stores data, connects to external services (like APIs), and performs complex calculations or operations. With the rise of fully-fledged client side app frameworks like React, Angular, and Vue, it's no longer necessary that the server provide the bulk of the business logic execution, since most traditionally server-side functionality can now exist on either the server or the client. 

## Webapps Are Everywhere

Driven by a growing availability and popularity of the tools used to create them, the number of web applications has increased exponentially in recent years. They have become so popular, in fact, that just one, Netflix, was recently found to account for as much as [36.5% of all North American internet traffic](https://www.washingtonpost.com/news/the-switch/wp/2015/05/28/netflix-now-accounts-for-almost-37-percent-of-our-internet-traffic/?utm_term=.42e67750ad43). That's one popular example common to many people's experiences, but whether it's finance, entertainment, or real estate, web applications from search engines to social networks have come to comprise a large part of digital life.

As the number of devices and users connected to the internet increases sharply over the next decade, web applications will become, if possible, more ubiquitous as a way of analyzing and acting upon these large pools of newly-available data. But although the Internet of Things (IoT) promises many things, including new insights harnessed from responsive smart devices, greater security is not one of them. 

## And They Know More Every Day

Not only are complex, dynamic web applications becoming more numerous and more heavily used, but the scope of their responsibilities is increasing, making them more attractive as the targets of sophisticated attacks.

Your phone not only knows your location due to its internal GPS, and can be used to reconstruct a detailed map of your everyday life, but with the rise of mobile-first banking and investing apps, it also has your financial information. As users spend more time on social networks like Facebook, Twitter, Snapchat, etc, your phone/browsing history can also be used to build a web of your personal relationships. With the rise of cryptocurrencies like Bitcoin as a medium of speculation and exchange, a leaked private key or crytocurrency exchange password now means a small fortune can be stolen through purely technical means on a distributed system where there is no Bank, Government, or Consumer Group to petition for redress.

And as [Machine Learning](https://www.infoworld.com/article/3214424/machine-learning/what-is-machine-learning-software-derived-from-data.html) becomes more advanced, there's a greater economic incentive for companies to collect as much of this data (possibly exposing it to attackers in the process) as they can, so they can use ML algorithms to know more about you and your behavior as a customer.

In short: The more of our lives we live online, the greater the consequences of poor cybersecurity.

## Security Issues Intrinsic to Web Applications

Web applications, as dynamic programs that input and output vast amounts of data, are naturally vulnerable to subversion. Below are some of the security issues that are part and parcel of the way web applications operate.

#### The Interconnectedness of Services (APIs)

The explosion of open-source services in the last decade has created a shared template of languages and frameworks that have in turn given rise to a common set of tools, and an ecosystem built around them. The modularity of [APIs](http://en.wikipedia.org/wiki/Application_programming_interface) allows for unparalleled code sharing and developer productivity, as common application functions (geocoding, SMS relays, transactional emails) are abstracted at the community level into everything from javascript libraries to RESTful web services.

But the pathways to an application necessarily opened by these services can expose web apps to malicious agents. API gateways are an especially prime target because they're often the source of enough traffic to mask attacks. They also often have the ability to access internal data or otherwise make critical state changes inside the app &mdash; an attractive target for malicious users. 

#### The Malice of Users

Web application developers often make the mistake that users won't enter certain commands, or will limit themselves to the direct options made available by the host site's UI, or the constrictions imposed by the browser.

This is simply not the case.

Users may enter the wrong type of data, executable code, or any number of other exotic inputs. They are also able to use tools that circumvent or otherwise short circuit the browser, programs (like Burp Suite!) that I wholeheartedly suggest you use.

A common mistake is relying on insufficient deterrents like **security through obscurity**. An example of security through obscurity in action would be attaching a click event on a critical button to hide it after activation. There's nothing stopping a (mildly) determined attacker from executing javascript or (in this case) jQuery to the effect of `$(element).show()` or using a proxy that performs that service on every rendered page (like Burp Proxy), then abusing the previously-undetectable button. Note that security through obscurity can be valid as a single security layer in a larger system, but it can't be the *only* security layer.

From the perspective of web application developers, all incoming data should be treated as malicious. It's the difficulty of commiting wholeheartedly to this philosophy that opens up the door for intrepid pentesting researchers!

#### The Fragmented Nature of Browsers

The main browsers in use today share a remarkable amount of functionality in common. In fact, their (relatively) smooth functioning is a testament to the open-source development of the underlying engines used by, in this case, two of the three most popular browsers in use today (Chrome and Firefox, which share significant portions of essential code). Newer versions of Internet Explorer (IE) and the Microsoft Edge browser have come a long way in erasing the legacy of mind-numbing boilerplate required by the likes of legacy IE installations.

But different browsers still interact with web applications differently, meaning (for our purposes) that switching things up can sometimes expose varying parts of a web app's attack surface. It's also fruitful, when you're engaging in a pentesting event, to try attacks while toggling through different browser modes. Disabling javascript, for example, can kill the client-side validation mechanisms some poorly-secured apps use to validate their user input. In this instance, running Burp, Websecurify, or whatever other proxy your using under a browser disallowing javascript may highlight these vulnerabilities.