# Submitting Great Bug Reports

Submitting bug reports is a straightforward task &mdash; but there are still small things you can do to give yourself a leg up. Following a basic set of guidelines and avoiding some rookie mistakes will maximize your chances of getting paid the maximum amount in the minimum time.

But first let's cover some pentest jargon. It's not necessary to use these words in your bug report, but they're important to know because you'll encounter them all the time &mdash; oftentimes in the conversation with the internal security team validating your findings.

## Important Jargon and Technical Terms

**POC** (**Proof of Concept**) refers to the need when submitting bug reports to provide a closely-documented walkthrough of your attack for the sake of repoducibility. If a member of the security team asks for your POC, they're asking you to give them a step-by-step breakdown of how you discovered the vulnerability, including:

* the HTTP headers and params of all the requests you've made
* the full raw HTTP responses to those requests
* the tools you used and some general info about your testing environment

To be clear: **You should always include this information in any bug report**, whether or not you call it a "POC." But when others use that term, this is what they're referring to.

**Attack Surface** refers to the number of areas that accept user input or are otherwise vulnerable because they are public-facing. A social network is an example of a web application that has a large attack surface, since posts, comments, upvotes, etc, all represent ares of app-user interaction.

**Security Posture** is a very fancy way of saying "how vulnerable a web app looks."

**Self-XSS** is a term referring to a certain kind of XSS vulnerability that companies offering bug bounty programs often exclude as being ineligible for a reward. Basically, it works like this:

1. Using Chrome or Firefox developer tools, a researcher edits his in-browser HTML to include an XSS test script. 
2. When he reloads the page, the always-welcome `The page at http://example.com says: 0` appears and in his sadly-mistaken eyes it's only a matter of time before the moneys start rolling in!

I'm not sure why people are under the impression this would ever count as a legitimate vulnerability, other than chalking it up to a kind of endearingly-opportunistic optimism. Of course, because the HTML you're editing via devtools is only on *your local machine* there's no risk to any other user being exposed to malicious script. In this case, you can only exploit yourself!

**Exploit vs Vulnerability**. Although I've tried to keep my use of the two terms properly distinct, they can sometimes bleed together when writing any amount of pentesting documentation, and it's useful to take this space to clearly review the differences between the two.

A **Vulnerability** is a compromised area or mechanism of a web application that can be further leveraged to take over some element of the application
or do harm to it.

An **Exploit** is code designed to take over just such elements or do just such harm.

So essentially, a vulnerability *leads* to an exploit &mdash; in blackhat terms, at least. As on the up-and-up freelance security researchers, we're much more concerned with finding vulnerabilities than exploiting them. There is a time for exploits, however, and that's when you're writing bug reports. They're tip #2 on my list of 10 simple tips for writing a great report.

## 5 Tips for Writing a Great Report
Here's a short list of easily-remembered tips that can make the difference between the bounty and an "unreproducible."

1. **Never** submit a scanner finding as part of a bug report directly. **Always** use scanners as the advance scouts in your pentesting army: Use the information they acquire to identify weak spots and follow-up on interesting findings yourself. Feeding the report from a scanner directly into a bug vulnerability report is an easy way of looking like a rookie.
2. Always, if you can, include information on how to following up detecting a vulnerability with details on exploiting it. As per the earlier definition of the two terms, this basically means coming up with the **super scary things** a malicious hacker might do with your information. Setting up botnets, stealing user funds, and selling user information to shady black markets are always a good start for some terrifying consequences.
3. Make sure you can reproduce the vulnerability before you submit it. This sounds almost insultingly simple, but there will be many times where you'll start salivating at an alerted `0` or evidence of a SQLi-based timeout issue and be tempted to write up your report right away. Resist this temptation 
4. Try to reproduce a vulnerability using different tools (if this is possible). This applies doubly so to scanners! Scanners are best used in tandem because their different payloads often detect different, sometimes overlapping, sometimes contradictory findings. If you've identified something like SQLi through a Burp Suite fuzz, try to confirm it using SQLmap or another tool. If, as in the case of SQLmap, that tool is designed to deal that vulnerability, all the better.
5. Screenshots! Although they're no substitute for a detailed guide to your vulnerability, with its code and textual analysis of the underlying issue, screenshots either accompanying each step or capturing the moment of exploitation can be a useful addition to your report and might contain information you didn't even know the internal security team could use. If nothing else, it's another piece of evidence for your claim. Remember that on Windows you've got `prntscrn` and on Mac the command to print a cropped window (a slightly better option) is `cmnd + shift + 4`.