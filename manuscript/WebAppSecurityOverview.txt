# Web App Security Overview

A web app, for the purpose of this guide, is a program stored on a remote server that responds to requests and/or user input via the Internet. It often (but not always) stores data, connects to external services (like APIs), and performs complex calculations or operations.

## The Ubiquity of Web Apps

Driven by computing advances predicted by Moore's Law; their utility; and the availability of tools like frameworks, languages, and educational resources that make building them easier, web applications have come to dominate a substantial portion of the modern web. In fact, just one (albeit a popular one), Netflix, was recently found to account for as much as [9.5% of North American upstream traffic](). That's one popular example common to many people's experiences, but whether it's finance, entertainment, or real estate, applications from search engines to social networks make up a big part of digital life. 

## Intrinsic Security Issues

Just as web apps make up a substantial share of the heat shed from the collective servers comprising the Internet, they suffer from security flaws intrinsic to their position as networked programs. These issues can be exploited (by you), but that's for [another chapter](Attacks.md). The most important thing to understand now are the high-level vectors by which web applications can be compromised. The code comes later.

#### Interconnectedness of Services (APIs)

One issue that makes web applications vulnerable is their exposure and/or reliance on APIs.

MORE INFO

#### The Malice of Users

Web application developers often make the mistake that users won't enter certain commands, or will limit themselves to the direct options made available by the host site's UI, or the constrictions imposed by the browser. This is simply fantasy. Users may enter the wrong type of data, executable code, or any number of varieties of malicious data. They are also liable at times to using programs that circumvent or otherwise short circuit the browser, programs (like Burp Suite!) that I wholeheartedly suggest you use.

A common mistake made in underestimating those conniving, shifty anarchists known as your user base lies in relying on bankrupt concepts like **security through obscurity**. An example of security through obscurity in action would be attaching a click event on a critical button to hide it after activation. There's nothing stopping a (mildly) determined attacker from calling ```$(element).show()``` (showing the element with a jQuery selector), or using a proxy that performs that service on every rendered page (like Burp Proxy), then abusing their hitherto protected button.

From the perspective of web application developers, all incoming data should be treated as malicious. It's the failure to do so that opens the door for pentest researchers.

#### The Fragmented Nature of Browsers

Another point of security concern for web applications is the variable nature of the browsers interpreting their data. Technical specs and systems differ substantially across the spectrum of the major players: Chrome (PERCENT), Mozilla Firefox (PERCENT), and Safari (PERCENT).

MORE INFO














